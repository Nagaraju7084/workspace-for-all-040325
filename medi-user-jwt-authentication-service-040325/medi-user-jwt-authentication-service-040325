090325 :

project location : F:\workspace for all 040325\medi-user-jwt-authentication-service-040325
swagger access : http://localhost:5003/swagger-ui.html

@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.
		authorizeRequests()
		.antMatchers("/api/**") //allow all the requests with are starting with /api
		//because the user registration shouldn't go through the security and user authentication code
		//also should not go through the security, it should be an openapi(jwt) where we should have to submit the username
		//and password and get the token 
		.permitAll(); //upto here enough, no need to add formabased and basic becuase we want go with the token based security
		//to test this, first register the user with roles, to do this,
		//we have sql script and this script will load at application startup
		//we have to add one property(below one)in application.properties file to execute the sql script automatically
		//and dump the data into database that property is
		//#if we want intialize datasource always regardless of its type
		//spring.datasource.initialization-mode=always
		//spring.datasource.data=classpath:schema.sql
	}



#if we want intialize datasource always regardless of its type
spring.datasource.initialization-mode=always
spring.datasource.data=classpath:schema.sql
note : -(hyphen) are not allowed in the schema.sql script ex : medi-jwt-service040325 -> not allowed rather, we should use _(underscore)
i.e. medi_jwt_service040325 -> this is allowed

//cntl + z
undo
//cntrl + y
redo

we inserted the permissions through schema.sql script but once after user is created
that permissions should have to map
this(permission, role, roletopermission data insertion has done through schema.sql script)data we should have to enter the user
user1 who is going to creating should have the permissions 1 to 4
user2 who is going to creating should have the permissions 1 to 4

before creating the user first insert the data into the usertype table as
id usertype
1  Admin
2  Doctor
3  Patient
create the user1 and user2 via swagger

@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.
		authorizeRequests()
		.antMatchers(HttpMethod.POST,"/api/users")
		.permitAll() //still we are getting the 403 - forbidden, path = /api/users
		.and()
		.csrf().disable(); //now user is creating after csrf disabled
	}

@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.
		authorizeRequests()
		.antMatchers(HttpMethod.POST,"/api/users")
		.permitAll() //still we are getting the 403 - forbidden, path = /api/users
		.and()
		.csrf().disable();
//now user is creating after csrf disabled, the below code is optional
//		.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
//		.and()
//		.formLogin().disable()
//		.httpBasic();
	}
	
		
json payload for user creation :
request :
{
  "firstName": "charles",
  "lastName": "james",
  "userId": "charlesJ",
  "email": "charles@gmail.com",
  "password": "charles",
  "dob": "12/09/1999",
  "gender": "male",
  "shortBiography": "founder",
  "status": true,
  "role": {
    "name": "Doctor",
    "id": 2
  },
  "userType": {
    "userType": "Doctor",
    "id": 2
  }
}

response :
{
  "id": 1,
  "firstName": "charles",
  "lastName": "james",
  "userId": "charlesJ",
  "email": "charles@gmail.com",
  "password": "$2a$10$UqmbClZGInUOSNKP27LDeeAweZ.B51v1uqqhoG0Cd6LjY.3.6QtZe",
  "dob": "Sun Sep 12 00:00:00 IST 1999",
  "gender": "male",
  "shortBiography": "founder",
  "status": true,
  "role": {
    "name": "Doctor",
    "permissionsSet": [],
    "id": 2
  },
  "userType": {
    "userType": "Doctor",
    "id": 2
  }
}

//now that user should have to go through the authentication
there will be one more api going to write that will take username and password and gives the jwt token
	
steps to develop jwt toke based security :
1.add the jwt dependencies(jjwt) - done
2.userrepository - done
3.userservice - done
4.usercontroler to register, authenticate, validate token - done upto register(create)
now authenticate and validate token writing before writing this, write jwt token service
because authenticate user will authenticate the user, after authentication should have to
call the jwt token service to create / generate the token

jwt token contains claims(user identities) requires username and authorities
all security aspects are under config folder
@Service - business delegate
the library jjwt from io.jsonwebtoke will generate the jwt token

all the constants(tokenexpiry, apikey, requestheadername, prefix, issuer) will write in serviceutil class
tokenexpiry = 1800000L -> milliseconds 30 minutes -> half an one hour
apikey to generate the digital signature = “ any application name “
issuer = “ application name “
requestheadername = “ Authorization “
prefix = “ Bearer “

when the authentication-service will authenticate the user credentials and will create the token and will display that the user should have been authenticated successfully
after authentication success then only the token will generate

write the api which will take username and password in mediuserresource class to authenticate to authenticate the user




