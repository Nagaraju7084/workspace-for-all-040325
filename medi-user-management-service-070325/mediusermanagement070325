
to design the medi-user-manangement-service-070325, apply the bounded context on core domains :
medi-user-manangement-service-070325 :
copy the required domains from the medi-core-domains-060325 project

step 1 :
only two domains talking about the user-management are : mediuser, usertype, role, permission,
permissiontorole

authentication-service will do take the username and password and make a communication to the
medi-user-manangement-service, get the user authenticated and generates the token, gives that token
back to the underlying application

step 2 :
create the repositories for mediuser, role, permission, permissiontorole, usertype

step 3 :
write the unit testcases to create the permissions, role with permissions, user with role assigned


properties in properties file :
spring.application.name=medi-user-management
server.port=6001

spring.h2.console.enabled=true
spring.h2.console.path=/h2Console

#not suggestable in production
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.format_sql=true

# h2 data source configurations
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url==jdbc:h2:mem:medi-user-management-service
spring.datasource.username=sa
spring.datasource.password=

its always better to take classes as immutable classes by using parameterized constructor

conversion of localdate to date :
LocalDate localDate = LocalDate.now();
Date createdDate = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());

session 16, session 17, session 18 are not there, no sessions
session 19 : ec2, docker, etc
session 20 : re started the user-management-project
session 21 : 
service layer started and define the signatures or funcationalities of the classes such as mediusertype, role, permission, mediuser and developed the dto for that service classes, in earlier we got satckoverflow error because of set and second problem is voilation of unique constraint exception this is caused because unique attribute in the column annotation due to these two reasons we were not able to insert the permissions to the role

session 22 : 080325 :
@Service = facade / delegate the business service but @Service will not handle the many responsibilities like @Controller
rather just acts as a business delegate class as service class
@Controller will handle data binding, data validation, validations exceptions messages handling, mapping

setter injection : testing is very easy with the partial values
constructor injection : we should pass all the values and will make our implementation as an immutable

if the properties names are same for both dto and domain then use
BeanUtils.copyProperties(source, target) given by spring

dtoToDomain :
BeanUtils.copyProperties(dto, domain);
domainToDto :
BeanUtils.copyProperties(domain, dto);

controller to service interaction :
bean / dto / vo
service to domain interaction :
domain / entity / model

//selected words / statements in capital
cntrl + shift + x 

to do provisioning and deprovisioning, understand the database model first
medirole is an independent entity which contains only roles

mediuser have a column to hold the roleid i.e. a role is assigning to the user but 
BeanUtils.copyProperties(source, target); -> won't copy the different data types and also complex types
different data types :
in the domains class - dob type is Date but in the bean class dob type is String
in the domain class - mediRole secondary association is there but in mediRoleDto is there that is dto association but not entity association 

//vertical words selection
alt + shift + a